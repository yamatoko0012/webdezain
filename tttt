<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solo TRPG KP Assistant</title>
    <style>
        :root {
            --main-bg-color: #f7f7f7;
            --container-bg-color: #ffffff;
            --kp-color: #0a4f78;
            --player-color: #8c0000;
            --border-color: #dddddd;
            --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            --padding-unit: 10px;
        }

        body {
            font-family: var(--font-family);
            background-color: var(--main-bg-color);
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
        }

        .container {
            width: 95%;
            max-width: 1000px; /* PCでの視認性を考慮した最大幅 */
            background-color: var(--container-bg-color);
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 20px;
            box-sizing: border-box;
        }

        h1 {
            text-align: center;
            color: var(--kp-color);
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        /* シナリオ入力エリア */
        #scenario-setup {
            margin-bottom: 20px;
            padding: var(--padding-unit);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: #fafafa;
        }

        #scenario-input {
            width: 100%;
            min-height: 200px;
            padding: var(--padding-unit);
            margin-bottom: var(--padding-unit);
            border: 1px solid #cccccc;
            border-radius: 4px;
            resize: vertical;
            font-size: 14px;
        }

        #start-button {
            display: block;
            width: 100%;
            padding: 10px 15px;
            background-color: var(--kp-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        #start-button:hover {
            background-color: #073a5a;
        }

        /* プレイエリア */
        #game-area {
            display: none; /* 初期状態では非表示 */
            border-top: 2px dashed var(--border-color);
            padding-top: 20px;
        }

        #log-display {
            height: 400px;
            overflow-y: auto;
            border: 1px solid var(--border-color);
            padding: var(--padding-unit);
            margin-bottom: var(--padding-unit);
            border-radius: 4px;
            background-color: #ffffff;
            line-height: 1.6;
        }

        .message {
            margin-bottom: 15px;
            padding: 8px 12px;
            border-radius: 18px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .kp-message {
            background-color: #e0f7fa;
            color: var(--kp-color);
            margin-right: auto;
            border-bottom-left-radius: 0;
            position: relative;
            box-shadow: 1px 1px 3px rgba(0,0,0,0.05);
        }

        .player-message {
            background-color: #ffebee;
            color: var(--player-color);
            margin-left: auto;
            border-bottom-right-radius: 0;
            text-align: right;
            position: relative;
            box-shadow: -1px 1px 3px rgba(0,0,0,0.05);
        }

        .message strong {
            display: block;
            font-size: 0.9em;
            margin-bottom: 3px;
            opacity: 0.7;
            font-weight: 600;
        }

        /* 入力フォーム */
        #action-form {
            display: flex;
        }

        #action-input {
            flex-grow: 1;
            padding: var(--padding-unit);
            border: 1px solid #ccc;
            border-radius: 4px 0 0 4px;
            font-size: 14px;
        }

        #send-button {
            padding: var(--padding-unit) 15px;
            background-color: var(--player-color);
            color: white;
            border: none;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        #send-button:hover {
            background-color: #6e0000;
        }

        .system-message {
            text-align: center;
            color: gray;
            font-style: italic;
            margin: 10px 0;
            font-size: 0.9em;
        }

        /* レスポンシブ対応 */
        @media (max-width: 768px) {
            body {
                padding: 10px;
                align-items: stretch;
            }
            .container {
                width: 100%;
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎮 Solo TRPG KP アシスタント 📜</h1>

        <div id="scenario-setup">
            <h2>1. シナリオを入力してください</h2>
            <textarea id="scenario-input" placeholder="ここに、KPに読ませたいシナリオの概要、登場人物、初期配置、判定ルールなどを詳しく記述してください。例：&#10;[シナリオ名：霧の中の洋館]&#10;[プレイヤーの目的：脱出]&#10;[初期場所：洋館のエントランス]&#10;[特殊ルール：SANチェックは1d100で50以下成功]&#10;『あなたは深い霧に包まれた古い洋館のエントランスに立っています。目の前には分厚い扉と、奥へ続く廊下が見えます。どうしますか？』"></textarea>
            <button id="start-button">ゲーム開始</button>
        </div>

        <div id="game-area">
            <h2>2. ゲームログ</h2>
            <div id="log-display">
                <div class="system-message">「ゲーム開始」ボタンを押すと、KPからの最初のメッセージが表示されます。</div>
            </div>
            
            <form id="action-form">
                <input type="text" id="action-input" placeholder="あなたの行動を入力してください（例：廊下に進む、扉を調べる）" required>
                <button type="submit" id="send-button">行動</button>
            </form>
        </div>
    </div>

    <script>
        // DOM要素の取得
        const scenarioInput = document.getElementById('scenario-input');
        const startButton = document.getElementById('start-button');
        const scenarioSetup = document.getElementById('scenario-setup');
        const gameArea = document.getElementById('game-area');
        const logDisplay = document.getElementById('log-display');
        const actionForm = document.getElementById('action-form');
        const actionInput = document.getElementById('action-input');

        // ゲーム状態の変数
        let isGameStarted = false;
        let currentScenarioText = '';
        let gameLog = [];
        
        // KPの応答をシミュレートするメイン関数
        function generateKpResponse(playerAction) {
            // **【重要】** ここに、AI（GPTなどの言語モデル）のAPI呼び出しや、
            // 複雑なルール処理、乱数判定のロジックが本来は必要になります。
            // GitHubでホスティングする場合、サーバーレス関数や外部APIを呼び出すことになりますが、
            // この素朴なHTML/JSのコードでは**擬似的な応答**になります。

            // 簡易的な応答ロジックのシミュレーション
            let response = '';
            
            // プレイヤーの行動テキストを分析（非常に簡単なキーワードマッチングの例）
            const lowerAction = playerAction.toLowerCase();

            if (lowerAction.includes('調べる') || lowerAction.includes('調査')) {
                // 簡易判定（1d100をシミュレート）
                const diceRoll = Math.floor(Math.random() * 100) + 1;
                response += `KP: 行動「${playerAction}」を受け付けました。調査判定（1d100）を行います... **出目: ${diceRoll}**。`;
                
                if (diceRoll <= 50) { // 例として50以下を成功とする
                    response += `\nKP: 成功です。あなたは熱心に調べ、**古びた鍵**を見つけました。`;
                } else {
                    response += `\nKP: 失敗です。何も見つかりませんでしたが、遠くで**何かの物音**が聞こえた気がします。`;
                }
            } else if (lowerAction.includes('進む') || lowerAction.includes('移動') || lowerAction.includes('廊下')) {
                response += `KP: あなたは慎重に廊下を進みます。廊下は長く、左右に扉が並んでいます。`;
                response += `\nKP: **左の扉**、**右の扉**、どちらを調べますか？`;
            } else if (lowerAction.includes('話す') || lowerAction.includes('叫ぶ')) {
                response += `KP: あなたの声は、湿った洋館の壁に吸い込まれ、こだまとなって返ってくるだけです。応える者はいません。`;
            } else if (playerAction.length < 5) {
                 response += `KP: その行動では情報が不足しています。もう少し具体的に記述してください。`;
            } else {
                response += `KP: あなたは${playerAction}ました。特に状況は変わりません。次にどうしますか？`;
            }

            // 本来はcurrentScenarioText（シナリオ本文）とgameLog（過去の経緯）を
            // 考慮した、より複雑なロジックが必要です。
            // サーバーレス関数や外部API（例：OpenAI API）を使用すれば、
            // この部分をAIに置き換えることができます。

            return response;
        }

        // ログ表示の更新
        function updateLog(speaker, message) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');
            
            let nameTag = '';
            if (speaker === 'KP') {
                messageDiv.classList.add('kp-message');
                nameTag = '<strong>キーパーからの応答</strong>';
            } else {
                messageDiv.classList.add('player-message');
                nameTag = '<strong>あなたの行動</strong>';
            }

            // メッセージ本文を整形（改行を反映）
            const formattedMessage = message.replace(/\n/g, '<br>');

            messageDiv.innerHTML = `${nameTag} ${formattedMessage}`;
            logDisplay.appendChild(messageDiv);
            
            // 最新のメッセージが見えるようにスクロール
            logDisplay.scrollTop = logDisplay.scrollHeight;

            // ログの記録（状態管理）
            gameLog.push({ speaker: speaker, message: message, timestamp: new Date().toISOString() });
        }

        // ゲーム開始ボタンのイベントリスナー
        startButton.addEventListener('click', () => {
            const scenarioText = scenarioInput.value.trim();
            if (scenarioText === '') {
                alert('KPとして進行するためのシナリオ本文を記述してください。');
                return;
            }

            // 状態の更新
            isGameStarted = true;
            currentScenarioText = scenarioText;
            gameLog = []; // ログをリセット

            // UIの切り替え
            scenarioSetup.style.display = 'none';
            gameArea.style.display = 'block';
            logDisplay.innerHTML = ''; // ログ表示をクリア
            actionInput.focus(); // 入力欄にフォーカス

            // 最初のKPメッセージを生成（シナリオの導入部分を流用）
            // ここでは簡易的に、シナリオの最初の数行を導入として扱います。
            const initialKpMessage = scenarioText.split('\n').find(line => line.includes('『') && line.includes('』')) || 
                                     "【システムメッセージ】シナリオが読み込まれました。あなたの行動を入力してください。";
            
            updateLog('KP', initialKpMessage.replace(/『|』/g, '')); // 引用符を除去して表示
        });

        // 行動フォームの送信イベントリスナー
        actionForm.addEventListener('submit', (event) => {
            event.preventDefault(); // フォームのデフォルト送信を防止
            
            if (!isGameStarted) {
                alert('先に「ゲーム開始」ボタンを押してシナリオを読み込んでください。');
                return;
            }

            const playerAction = actionInput.value.trim();
            if (playerAction === '') {
                alert('行動を入力してください。');
                return;
            }

            // プレイヤーの行動をログに表示
            updateLog('Player', playerAction);

            // KPの応答を生成（非同期処理をシミュレートするためsetTimeoutを使用）
            // 実際には、ここでAPIコールが実行されます。
            actionInput.disabled = true; // 応答待ちの間、入力を無効化
            actionInput.placeholder = 'KPが考え中です...';

            setTimeout(() => {
                const kpResponse = generateKpResponse(playerAction);
                updateLog('KP', kpResponse);
                
                // 入力フィールドをリセットし、再有効化
                actionInput.value = '';
                actionInput.disabled = false;
                actionInput.placeholder = 'あなたの行動を入力してください（例：廊下に進む、扉を調べる）';
                actionInput.focus();
            }, 1500); // 1.5秒待機（思考時間シミュレーション）
        });

        // **【さらなる機能拡張のための準備】**
        // 以下の関数は、ダイスロールなどのTRPG機能を拡張する際に使用できます。
        function rollDice(sides = 6) {
            return Math.floor(Math.random() * sides) + 1;
        }

        function rollD100() {
            return rollDice(100);
        }

        // 状態保存（Local Storageなどを使用すれば、ブラウザを閉じても継続可能）
        function saveGameState() {
            // localStorage.setItem('trpgGameLog', JSON.stringify(gameLog));
            // localStorage.setItem('trpgScenario', currentScenarioText);
        }

        function loadGameState() {
            // const savedLog = localStorage.getItem('trpgGameLog');
            // ... ロード処理
        }
        
    </script>
</body>
</html>
